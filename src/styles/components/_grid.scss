@import "../settings/index";
@import "../tools/index";

@include block('container', 'component') {
  @include container;
  flex: 1 1 100%;

  &.fluid {
    max-width: 100%
  }

  &.fill-height {
    display: flex;
    align-items: center;
  }

  .layout {
    height: 100%;
    flex: 1 1 auto;
  }

  &.grid-list {
    @each $size, $gutter in $grid-gutters {
      &-#{$size} {
        padding: $gutter;

        .layout {
          .flex {
            padding: $gutter / 2;
          }
        }

        .layout:only-child {
          margin: -($gutter / 2);
        }

        .layout:not(:only-child) {
          margin: auto #{-($gutter / 2)};
        }

        *:not(:only-child) {
          .layout:first-child {
            margin-top: -($gutter / 2);
          }

          .layout:last-child {
            margin-bottom: -($gutter / 2);
          }
        }
      }
    }
  }
}

@include block('layout', 'component') {
  display: flex;
  flex: 1 1 auto;
  flex-wrap: nowrap;

  &.row {
    flex-direction: row;

    &.reverse {
      flex-direction: row-reverse;
    }
  }

  &.column {
    flex-direction: column;

    > .flex {
      max-width: 100%;
    }

    &.reverse {
      flex-direction: column-reverse;
    }
  }

  &.wrap {
    flex-wrap: wrap;
  }
}

@each $size, $media-query in $layout-breakpoint-displays {
  @media #{$media-query} {
    @for $n from 0 through $grid-columns {
      @if $n != 0 {
        .flex.#{$size}-#{$n} {
          flex-basis: $n / $grid-columns * 100%;
          flex-grow: 0;
          max-width: $n / $grid-columns * 100%;
        }

        .flex.order-#{$size}-#{$n} {
          order: $n;
        }
      }

      .flex.offset-#{$size}-#{$n} {
        // Offsets can only ever work in row layouts
        margin-left: $n / $grid-columns * 100%;
      }
    }
  }
}

.flex,
.child-flex > * {
  flex: 1 1 auto;
}

.align {
  &-start {
    align-items: flex-start;
  }

  &-end {
    align-items: flex-end;
  }

  &-center {
    align-items: center;
  }

  &-baseline {
    align-items: baseline;
  }
}

.align-content {
  &-start {
    align-content: flex-start;
  }

  &-end {
    align-content: flex-end;
  }

  &-center {
    align-content: center;
  }

  &-space-between {
    align-content: space-between;
  }

  &-space-around{
    align-content: space-around;
  }
}

.justify {
  &-start {
    justify-content: flex-start;
  }

  &-end {
    justify-content: flex-end;
  }

  &-center {
    justify-content: center;
  }

  &-space-around {
    justify-content: space-around;
  }

  &-space-between {
    justify-content: space-between;
  }
}

.spacer {
  flex-grow: 1 !important;
}

.grow {
  flex-grow: 1 !important;
  flex-shrink: 0 !important;
}

.shrink {
  flex-grow: 0 !important;
  flex-shrink: 1 !important;
}

.scroll-y {
  overflow-y: auto;
}

.fill-height {
  height: 100%;
}

.hide-overflow {
  overflow: hidden !important;
}

.show-overflow {
  overflow: visible !important;
}

.no-wrap {
  white-space: nowrap;
}

.ellipsis {
  @include overflow-ellipsis;
}

// Display helpers
.d-flex {
  display: flex !important;
}

.d-inline-flex {
  display: inline-flex !important;
}

.d-flex,
.d-inline-flex {
  > * {
    flex: 1 1 auto !important;
  }
}

.d-block {
  display: block !important;
}

.d-inline-block {
  display: inline-block !important;
}
